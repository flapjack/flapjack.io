---
title: Flapjack API Reference
layout: api
version: 2.0

language_tabs:
  - ruby: Ruby
  - shell: cURL
  - json_parameter: Parameters
  - json_response: Responses

---

<%
require 'forwardable'
require 'swagger'
require 'erb'

@swagger_dir = File.join(File.dirname(__FILE__), '..', '..', '..', '..', 'lib', 'swagger')

@swagger = Swagger.load(File.join(@swagger_dir, 'api.json'))

def swagger_method(method_type, number, path, loc = {})
  return '' unless @swagger.paths.key?(path) &&
                   @swagger.paths[path].key?(method_type)

  o = render_partial('sections/jsonapi_method.html.erb', :locals => loc.merge(
    :method_type => method_type,
    :path        => path,
    :number      => number,
    :operation   => @swagger.paths[path].send(method_type),
    :definitions => @swagger.definitions
  ))
  o << "\n\n"
  o
end

resources = Flapjack::Diner::Configuration::RESOURCES.values.map {|r| r[:resource] }

Flapjack::Diner::Configuration::RESOURCES.each_pair do |resource, res|
%>
<h1 id="title_<%= resource %>"><%= resource.to_s.humanize %></h1>
<%

  loc = {
    :resource_type        => res[:resource],
    :resource_name        => resource,
    :resource_linked_type => nil,
    :resource_linked_name => nil,
    :uuids                => (1..3).collect { SecureRandom.uuid }
  }

  output = ''

  path        = "/#{resource}"
  single_path = "/#{resource}/{#{res[:resource]}_id}"

  related = res[:relationships]

  reqs = res[:requests]
  rels = res[:relationships]

  reqs.keys.each do |method_type|
    unless :post.eql?(method_type)
      # FIXME enable this, munge the swagger req data for POST multiples so docs make sense
      output << swagger_method(method_type, :singular, single_path, loc)
    end

    output << swagger_method(method_type, :multiple, path, loc)
  end

  unless rels.nil?

    rels.each_pair do |other_resource, other_def|
      next unless other_def.key?(:link) && other_def[:link]

      number = case other_def[:number]
      when :multiple
        :multiple_link
      when :singular
        :singular_link
      end

      loc.update(
        :resource_linked_type => other_def[:resource],
        :resource_linked_name => other_resource
      )

      [:post, :get, :patch, :delete].each do |method_type|
        next unless other_def.key?(method_type) && other_def[method_type]
        link_path = :get.eql?(method_type) ?
                      "/#{resource}/{#{res[:resource]}_id}/#{other_resource}" :
                      "/#{resource}/{#{res[:resource]}_id}/relationships/#{other_resource}"
        output << swagger_method(method_type, number, link_path, loc)
      end
    end
  end

%>
<%= output %>
<%
end
%>
