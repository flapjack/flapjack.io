<%

# NB somewhat duplicated in example_curl
def example_data(samp, props, prop, num)
  if props.key?(:type) && samp.key?(props.type.enum.first.to_sym) &&
    samp[props.type.enum.first.to_sym][num].key?(prop.to_sym)

    value = samp[props.type.enum.first.to_sym][num][prop.to_sym]

    case value
    when DateTime
      "DateTime.parse('#{value.iso8601}')"
    when String
      "'#{value.gsub(%r[\\], '\\').gsub(%r['], "\\'")}'"
    when nil
      'nil'
    else
      value.to_s
    end
  else
    property = props[prop]
    case property.type
    when 'string'
      if property.key?(:format)
        case property[:format]
        when 'date-time'
          "'<String(date-time)>'"
        # when 'url'
        #   '"<String(url)>"'
        else
          "'<String>'"
        end
      else
        "'<String>'"
      end
    when 'integer'
      '1'
    when 'boolean'
      'true'
    else
      property.type
    end
  end
end

ext = resource_name
%>

```ruby
require 'flapjack-diner'
Flapjack::Diner.base_uri('localhost:3081')

<%
  case method_type
  when :post
    body_param = parameters.detect {|pa| 'body'.eql?(pa.in) }

    props = nil
    examp = []

    unless body_param.nil?
      schema = body_param.schema

      definition_name = if 'array'.eql?(schema.type)
        schema.items['$ref']
      else
        schema['$ref']
      end
      definition = definitions[definition_name.sub(%r{^#/definitions/}, '')]

      req = (definition.required - ['type']).sort
      props = definition.properties
      opt = (props.keys - ((definition.required || []) + ['relationships'])).sort
      examp = (req + opt) - ['id']
-%>
# required: <%= req.join(', ') %>
# optional: <%= opt.join(', ') %>

<%
    end
-%>
<%
  case number
  when :singular
-%>
Flapjack::Diner.create_<%= ext -%>(
  :id => '<%= uuids[0] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 0)}" }.join(",\n") %>
<%
end
-%>
)
<%
  when :multiple
-%>
Flapjack::Diner.create_<%= ext -%>({
  :id => '<%= uuids[0] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 0)}" }.join(",\n") %>
<% end -%>
}, {
  :id => '<%= uuids[1] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 1)}" }.join(",\n") %>
<% end -%>
})
<% end -%>
<% when :get
     case number
     when :singular
%>
Flapjack::Diner.<%= ext -%>(
  :filter => {:id => '<%= uuids[0] -%>'}
)
<%   when :multiple %>
Flapjack::Diner.<%= ext -%>(
  :fields   => [], # string, or an array of strings
  :filter   => {}, # hash of field values/regexes to match
  :include  => [], # string, or an array of strings
  :sort     => [], # string, or an array of strings
  :page     => 1,  # defaults to 1
  :per_page => 20  # defaults to 20
)
<% end %>
<% when :patch
    body_param = parameters.detect {|pa| 'body'.eql?(pa.in) }

    props = nil
    examp = []

    unless body_param.nil?
      schema = body_param.schema

      definition_name = if 'array'.eql?(schema.type)
        schema.items['$ref']
      else
        schema['$ref']
      end
      definition = definitions[definition_name.sub(%r{^#/definitions/}, '')]

      req = (definition.required - ['type']).sort
      props = definition.properties
      r_id = req - ['id']
      opt = (props.keys - ((definition.required || []) + ['relationships'])).sort
      examp = (req + opt) - ['id']
-%>
# required: <%= req.sort.join(', ') %>
# optional: <%= opt.sort.join(', ') %>

<% end -%>
<%
  case number
  when :singular
-%>
Flapjack::Diner.update_<%= ext -%>(
  :id => '<%= uuids[0] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 0)}" }.join(",\n") %>
<% end -%>
)
<%
  when :multiple
-%>
Flapjack::Diner.update_<%= ext -%>({
  :id => '<%= uuids[0] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 0)}" }.join(",\n") %>
<% end -%>
}, {
  :id => '<%= uuids[1] -%>'<% unless examp.empty? %>,
<%= examp.map {|r| "  :#{r} => #{example_data(sample_data, props, r, 1)}" }.join(",\n") %>
<% end -%>
})
<% end -%>
<% when :delete %>
<%
  case number
  when :singular
-%>
Flapjack::Diner.delete_<%= ext -%>(
  '<%= uuids[0] %>'
)
<%
  when :multiple
-%>
Flapjack::Diner.delete_<%= ext -%>(
  '<%= uuids[0] %>',
  '<%= uuids[1] %>'
)
<% end -%>
<%
end
-%>
```
