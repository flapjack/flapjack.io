{
   "basePath" : "/doc",
   "definitions" : {
      "ContactCreate" : {
         "required" : [
            "type",
            "name"
         ],
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "contact"
               ]
            },
            "relationships" : {
               "$ref" : "#/definitions/ContactCreateLinks"
            },
            "timezone" : {
               "type" : "string",
               "format" : "tzinfo"
            }
         }
      },
      "AcknowledgementCreate" : {
         "properties" : {
            "summary" : {
               "type" : "string"
            },
            "duration" : {
               "type" : "integer"
            },
            "relationships" : {
               "$ref" : "#/definitions/AcknowledgementCreateLinks"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "acknowledgement"
               ]
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         },
         "required" : [
            "type"
         ]
      },
      "MediumCreate" : {
         "required" : [
            "type",
            "address",
            "transport"
         ],
         "properties" : {
            "pagerduty_ack_duration" : {
               "type" : "integer",
               "minimum" : 1
            },
            "pagerduty_token" : {
               "type" : "string"
            },
            "address" : {
               "type" : "string"
            },
            "interval" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "transport" : {
               "type" : "string",
               "enum" : [
                  "email",
                  "jabber",
                  "pagerduty",
                  "sms",
                  "slack",
                  "sms_twilio",
                  "sms_nexmo",
                  "sms_aspsms",
                  "sns"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/MediumCreateLinks"
            },
            "pagerduty_subdomain" : {
               "type" : "string"
            },
            "rollup_threshold" : {
               "type" : "integer",
               "minimum" : 1
            },
            "type" : {
               "enum" : [
                  "medium"
               ],
               "type" : "string"
            }
         }
      },
      "TagLinks" : {
         "properties" : {
            "states" : {
               "$ref" : "#/definitions/StatesLinkage"
            },
            "contacts" : {
               "$ref" : "#/definitions/ContactsLinkage"
            },
            "scheduled_maintenances" : {
               "$ref" : "#/definitions/ScheduledMaintenancesLinkage"
            },
            "checks" : {
               "$ref" : "#/definitions/ChecksLinkage"
            },
            "rules" : {
               "$ref" : "#/definitions/RulesLinkage"
            },
            "unscheduled_maintenances" : {
               "$ref" : "#/definitions/UnscheduledMaintenancesLinkage"
            }
         }
      },
      "ScheduledMaintenanceReference" : {
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "scheduled_maintenance"
               ]
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "State" : {
         "properties" : {
            "summary" : {
               "type" : "string"
            },
            "finished_at" : {
               "type" : "string",
               "format" : "date-time"
            },
            "details" : {
               "type" : "string"
            },
            "action" : {
               "type" : "string",
               "enum" : [
                  "acknowledgement",
                  "test_notifications"
               ]
            },
            "perfdata" : {
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "state"
               ]
            },
            "updated_at" : {
               "type" : "string",
               "format" : "date-time"
            },
            "created_at" : {
               "type" : "string",
               "format" : "date-time"
            },
            "relationships" : {
               "$ref" : "#/definitions/StateLinks"
            },
            "condition" : {
               "type" : "string",
               "enum" : [
                  "ok",
                  "critical",
                  "warning",
                  "unknown"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "created_at",
            "updated_at",
            "finished_at",
            "condition",
            "action",
            "summary",
            "details",
            "perfdata"
         ]
      },
      "TagIncluded" : {
         "required" : [
            "type",
            "id"
         ],
         "properties" : {
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ],
               "type" : "string"
            }
         }
      },
      "data_Contacts" : {
         "properties" : {
            "included" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ContactIncluded"
               }
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Contact"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         },
         "required" : [
            "data"
         ]
      },
      "ContactReference" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "type" : {
               "enum" : [
                  "contact"
               ],
               "type" : "string"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         }
      },
      "TagCreateLinks" : {
         "properties" : {
            "rules" : {
               "$ref" : "#/definitions/data_RulesReference"
            },
            "checks" : {
               "$ref" : "#/definitions/data_ChecksReference"
            },
            "contacts" : {
               "$ref" : "#/definitions/data_ContactsReference"
            }
         }
      },
      "UnscheduledMaintenanceUpdate" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "end_time" : {
               "format" : "date-time",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "unscheduled_maintenance"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         }
      },
      "Medium" : {
         "required" : [
            "id",
            "type",
            "transport"
         ],
         "properties" : {
            "pagerduty_subdomain" : {
               "type" : "string"
            },
            "rollup_threshold" : {
               "type" : "integer",
               "minimum" : 1
            },
            "type" : {
               "enum" : [
                  "medium"
               ],
               "type" : "string"
            },
            "transport" : {
               "type" : "string",
               "enum" : [
                  "email",
                  "jabber",
                  "pagerduty",
                  "sms",
                  "slack",
                  "sms_twilio",
                  "sms_nexmo",
                  "sms_aspsms",
                  "sns"
               ]
            },
            "pagerduty_ack_duration" : {
               "minimum" : 1,
               "type" : "integer"
            },
            "address" : {
               "type" : "string"
            },
            "pagerduty_token" : {
               "type" : "string"
            },
            "interval" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "relationships" : {
               "$ref" : "#/definitions/MediumLinks"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         }
      },
      "MediumCreateLinks" : {
         "properties" : {
            "rules" : {
               "$ref" : "#/definitions/data_RulesReference"
            },
            "contact" : {
               "$ref" : "#/definitions/data_ContactReference"
            }
         },
         "required" : [
            "contact"
         ]
      },
      "data_UnscheduledMaintenance" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/UnscheduledMaintenanceIncluded"
               },
               "type" : "array"
            },
            "data" : {
               "$ref" : "#/definitions/UnscheduledMaintenance"
            }
         }
      },
      "AcknowledgementCreateLinks" : {
         "properties" : {
            "tag" : {
               "$ref" : "#/definitions/data_TagReference"
            },
            "check" : {
               "$ref" : "#/definitions/data_CheckReference"
            }
         }
      },
      "data_Rules" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Rule"
               }
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/RuleIncluded"
               },
               "type" : "array"
            }
         }
      },
      "TagCreate" : {
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "tag"
               ]
            },
            "relationships" : {
               "$ref" : "#/definitions/TagCreateLinks"
            }
         },
         "required" : [
            "type",
            "name"
         ]
      },
      "TestNotificationCreateLinks" : {
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/data_CheckReference"
            },
            "tag" : {
               "$ref" : "#/definitions/data_TagReference"
            }
         }
      },
      "data_ContactReference" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/ContactReference"
            }
         },
         "required" : [
            "data"
         ]
      },
      "StateLinks" : {
         "required" : [
            "check"
         ],
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/CheckLinkage"
            }
         }
      },
      "ScheduledMaintenanceCreate" : {
         "properties" : {
            "start_time" : {
               "format" : "date-time",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/ScheduledMaintenanceCreateLinks"
            },
            "end_time" : {
               "type" : "string",
               "format" : "date-time"
            },
            "type" : {
               "enum" : [
                  "scheduled_maintenance"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         },
         "required" : [
            "type",
            "start_time",
            "end_time"
         ]
      },
      "RuleLinks" : {
         "properties" : {
            "media" : {
               "$ref" : "#/definitions/MediaLinkage"
            },
            "contact" : {
               "$ref" : "#/definitions/ContactLinkage"
            },
            "tags" : {
               "$ref" : "#/definitions/TagsLinkage"
            }
         },
         "required" : [
            "contact",
            "media",
            "tags"
         ]
      },
      "Contact" : {
         "required" : [
            "id",
            "type",
            "name"
         ],
         "properties" : {
            "timezone" : {
               "format" : "tzinfo",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/ContactLinks"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "enum" : [
                  "contact"
               ],
               "type" : "string"
            },
            "name" : {
               "type" : "string"
            }
         }
      },
      "data_TagsReference" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/TagReference"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "TagsLinkage" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Linkage"
            },
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/TagReference"
               },
               "type" : "array"
            }
         }
      },
      "data_ScheduledMaintenance" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "data" : {
               "$ref" : "#/definitions/ScheduledMaintenance"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/ScheduledMaintenanceIncluded"
               },
               "type" : "array"
            }
         }
      },
      "data_Check" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "data" : {
               "$ref" : "#/definitions/Check"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/CheckIncluded"
               },
               "type" : "array"
            }
         },
         "required" : [
            "data"
         ]
      },
      "data_Metrics" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/Metrics"
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         }
      },
      "ScheduledMaintenanceIncluded" : {
         "required" : [
            "type",
            "id"
         ],
         "properties" : {
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ],
               "type" : "string"
            }
         }
      },
      "CheckUpdate" : {
         "properties" : {
            "enabled" : {
               "type" : "boolean",
               "enum" : [
                  true,
                  false
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "check"
               ]
            },
            "relationships" : {
               "$ref" : "#/definitions/CheckUpdateLinks"
            },
            "name" : {
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "Links" : {
         "required" : [
            "self"
         ],
         "properties" : {
            "self" : {
               "type" : "string",
               "format" : "url"
            },
            "prev" : {
               "type" : "string",
               "format" : "url"
            },
            "first" : {
               "type" : "string",
               "format" : "url"
            },
            "last" : {
               "format" : "url",
               "type" : "string"
            },
            "next" : {
               "type" : "string",
               "format" : "url"
            }
         }
      },
      "MediaLinkage" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/MediumReference"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "UnscheduledMaintenance" : {
         "properties" : {
            "end_time" : {
               "type" : "string",
               "format" : "date-time"
            },
            "relationships" : {
               "$ref" : "#/definitions/UnscheduledMaintenanceLinks"
            },
            "start_time" : {
               "type" : "string",
               "format" : "date-time"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "unscheduled_maintenance"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type",
            "start_time",
            "end_time"
         ]
      },
      "data_ScheduledMaintenancesReference" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ScheduledMaintenanceReference"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "CheckUpdateLinks" : {
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            }
         }
      },
      "MetricsCheckFreshnessCounts" : {
         "properties" : {
            "0" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "60" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "3600" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "900" : {
               "type" : "integer",
               "minimum" : 0
            },
            "300" : {
               "minimum" : 0,
               "type" : "integer"
            }
         },
         "required" : [
            "0",
            "60",
            "300",
            "900",
            "3600"
         ]
      },
      "Pagination" : {
         "required" : [
            "page",
            "per_page",
            "total_pages",
            "total_count"
         ],
         "properties" : {
            "total_count" : {
               "type" : "integer",
               "format" : "int64"
            },
            "total_pages" : {
               "format" : "int64",
               "type" : "integer"
            },
            "page" : {
               "format" : "int64",
               "type" : "integer"
            },
            "per_page" : {
               "format" : "int64",
               "type" : "integer"
            }
         }
      },
      "Acknowledgement" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "enum" : [
                  "acknowledgement"
               ],
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/AcknowledgementLinks"
            },
            "duration" : {
               "type" : "integer"
            },
            "summary" : {
               "type" : "string"
            }
         }
      },
      "data_State" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/State"
            },
            "included" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/StateIncluded"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         }
      },
      "StateIncluded" : {
         "required" : [
            "type",
            "id"
         ],
         "properties" : {
            "type" : {
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ],
               "type" : "string"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         }
      },
      "RuleCreate" : {
         "properties" : {
            "relationships" : {
               "$ref" : "#/definitions/RuleCreateLinks"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "time_restriction_ical" : {
               "type" : "string"
            },
            "name" : {
               "type" : "string"
            },
            "conditions_list" : {
               "type" : "string"
            },
            "blackhole" : {
               "type" : "boolean"
            },
            "strategy" : {
               "type" : "string",
               "enum" : [
                  "global",
                  "any_tag",
                  "all_tags",
                  "no_tag"
               ]
            },
            "type" : {
               "enum" : [
                  "rule"
               ],
               "type" : "string"
            },
            "enabled" : {
               "type" : "boolean"
            }
         },
         "required" : [
            "type",
            "enabled",
            "blackhole",
            "strategy"
         ]
      },
      "StatesLinkage" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/StateReference"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "RuleIncluded" : {
         "properties" : {
            "type" : {
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ],
               "type" : "string"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "type",
            "id"
         ]
      },
      "RulesLinkage" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/RuleReference"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "ContactLinks" : {
         "required" : [
            "checks",
            "media",
            "rules"
         ],
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/TagsLinkage"
            },
            "rules" : {
               "$ref" : "#/definitions/RulesLinkage"
            },
            "checks" : {
               "$ref" : "#/definitions/ChecksLinkage"
            },
            "media" : {
               "$ref" : "#/definitions/MediaLinkage"
            }
         }
      },
      "Metrics" : {
         "required" : [
            "type",
            "total_keys",
            "event_queue_length",
            "processed_events",
            "check_freshness",
            "check_counts"
         ],
         "properties" : {
            "event_queue_length" : {
               "type" : "integer",
               "minimum" : 0
            },
            "check_freshness" : {
               "$ref" : "#/definitions/MetricsCheckFreshnessCounts"
            },
            "check_counts" : {
               "$ref" : "#/definitions/MetricsCheckCounts"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "metrics"
               ]
            },
            "processed_events" : {
               "$ref" : "#/definitions/MetricsProcessedEventCounts"
            },
            "total_keys" : {
               "minimum" : 0,
               "type" : "integer"
            }
         }
      },
      "Rule" : {
         "required" : [
            "id",
            "type",
            "enabled",
            "blackhole",
            "strategy"
         ],
         "properties" : {
            "enabled" : {
               "type" : "boolean"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "rule"
               ]
            },
            "strategy" : {
               "enum" : [
                  "global",
                  "any_tag",
                  "all_tags",
                  "no_tag"
               ],
               "type" : "string"
            },
            "blackhole" : {
               "type" : "boolean"
            },
            "conditions_list" : {
               "type" : "string"
            },
            "name" : {
               "type" : "string"
            },
            "time_restriction_ical" : {
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "relationships" : {
               "$ref" : "#/definitions/RuleLinks"
            }
         }
      },
      "CheckCreateLinks" : {
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            }
         }
      },
      "TagUpdateLinks" : {
         "properties" : {
            "contacts" : {
               "$ref" : "#/definitions/data_ContactsReference"
            },
            "rules" : {
               "$ref" : "#/definitions/data_RulesReference"
            },
            "checks" : {
               "$ref" : "#/definitions/data_ChecksReference"
            }
         }
      },
      "StateLinkage" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Linkage"
            },
            "data" : {
               "$ref" : "#/definitions/StateReference"
            }
         }
      },
      "data_TestNotification" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/TestNotification"
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         }
      },
      "data_Tags" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Tag"
               }
            },
            "included" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/TagIncluded"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         }
      },
      "ScheduledMaintenance" : {
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "scheduled_maintenance"
               ]
            },
            "start_time" : {
               "format" : "date-time",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/ScheduledMaintenanceLinks"
            },
            "end_time" : {
               "type" : "string",
               "format" : "date-time"
            }
         },
         "required" : [
            "id",
            "type",
            "start_time",
            "end_time"
         ]
      },
      "data_UnscheduledMaintenancesReference" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/UnscheduledMaintenanceReference"
               }
            }
         }
      },
      "data_ContactsReference" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ContactReference"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "MediumUpdate" : {
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/MediumUpdateLinks"
            },
            "pagerduty_token" : {
               "type" : "string"
            },
            "pagerduty_ack_duration" : {
               "type" : "integer",
               "minimum" : 1
            },
            "interval" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "address" : {
               "type" : "string"
            },
            "transport" : {
               "enum" : [
                  "email",
                  "jabber",
                  "pagerduty",
                  "sms",
                  "slack",
                  "sms_twilio",
                  "sms_nexmo",
                  "sms_aspsms",
                  "sns"
               ],
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "medium"
               ]
            },
            "rollup_threshold" : {
               "type" : "integer",
               "minimum" : 1
            },
            "pagerduty_subdomain" : {
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "ScheduledMaintenanceUpdate" : {
         "properties" : {
            "type" : {
               "enum" : [
                  "scheduled_maintenance"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "start_time" : {
               "format" : "date-time",
               "type" : "string"
            },
            "end_time" : {
               "format" : "date-time",
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type",
            "start_time",
            "end_time"
         ]
      },
      "data_Statistics" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Statistic"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "TagLinkage" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/TagReference"
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "ScheduledMaintenancesLinkage" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ScheduledMaintenanceReference"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "TagUpdate" : {
         "properties" : {
            "relationships" : {
               "$ref" : "#/definitions/TagUpdateLinks"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "enum" : [
                  "tag"
               ],
               "type" : "string"
            },
            "name" : {
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "UnscheduledMaintenanceLinks" : {
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/CheckLinkage"
            }
         },
         "required" : [
            "check"
         ]
      },
      "RuleReference" : {
         "properties" : {
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "enum" : [
                  "rule"
               ],
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "Linkage" : {
         "properties" : {
            "self" : {
               "type" : "string",
               "format" : "url"
            },
            "related" : {
               "type" : "string",
               "format" : "url"
            }
         },
         "required" : [
            "related",
            "self"
         ]
      },
      "ContactUpdateLinks" : {
         "properties" : {
            "rules" : {
               "$ref" : "#/definitions/data_RulesReference"
            },
            "media" : {
               "$ref" : "#/definitions/data_MediaReference"
            },
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            }
         }
      },
      "Check" : {
         "required" : [
            "id",
            "type",
            "name",
            "enabled",
            "failing"
         ],
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "failing" : {
               "type" : "boolean",
               "enum" : [
                  true,
                  false
               ]
            },
            "relationships" : {
               "$ref" : "#/definitions/CheckLinks"
            },
            "condition" : {
               "type" : "string",
               "enum" : [
                  "ok",
                  "critical",
                  "warning",
                  "unknown"
               ]
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "enabled" : {
               "type" : "boolean",
               "enum" : [
                  true,
                  false
               ]
            },
            "type" : {
               "enum" : [
                  "check"
               ],
               "type" : "string"
            }
         }
      },
      "CheckLinks" : {
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/TagsLinkage"
            },
            "contacts" : {
               "$ref" : "#/definitions/ContactsLinkage"
            },
            "current_unscheduled_maintenance" : {
               "$ref" : "#/definitions/UnscheduledMaintenanceLinkage"
            },
            "latest_notifications" : {
               "$ref" : "#/definitions/StatesLinkage"
            },
            "alerting_media" : {
               "$ref" : "#/definitions/MediaLinkage"
            },
            "states" : {
               "$ref" : "#/definitions/StatesLinkage"
            },
            "current_scheduled_maintenances" : {
               "$ref" : "#/definitions/ScheduledMaintenancesLinkage"
            },
            "scheduled_maintenances" : {
               "$ref" : "#/definitions/ScheduledMaintenancesLinkage"
            },
            "unscheduled_maintenances" : {
               "$ref" : "#/definitions/UnscheduledMaintenancesLinkage"
            },
            "current_state" : {
               "$ref" : "#/definitions/StateLinkage"
            }
         }
      },
      "CheckCreate" : {
         "required" : [
            "type",
            "name",
            "enabled"
         ],
         "properties" : {
            "enabled" : {
               "enum" : [
                  true,
                  false
               ],
               "type" : "boolean"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "check"
               ]
            },
            "relationships" : {
               "$ref" : "#/definitions/CheckCreateLinks"
            },
            "name" : {
               "type" : "string"
            }
         }
      },
      "StateReference" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "enum" : [
                  "state"
               ],
               "type" : "string"
            }
         }
      },
      "MediumIncluded" : {
         "properties" : {
            "id" : {
               "type" : "string",
               "format" : "uuid"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ]
            }
         },
         "required" : [
            "type",
            "id"
         ]
      },
      "RuleCreateLinks" : {
         "properties" : {
            "media" : {
               "$ref" : "#/definitions/data_MediaReference"
            },
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            },
            "contact" : {
               "$ref" : "#/definitions/data_ContactReference"
            }
         },
         "required" : [
            "contact"
         ]
      },
      "ContactCreateLinks" : {
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            }
         }
      },
      "UnscheduledMaintenancesLinkage" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Linkage"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/UnscheduledMaintenanceReference"
               }
            }
         }
      },
      "ScheduledMaintenanceLinks" : {
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/CheckLinkage"
            }
         },
         "required" : [
            "check"
         ]
      },
      "MediumUpdateLinks" : {
         "properties" : {
            "rules" : {
               "$ref" : "#/definitions/data_RulesReference"
            }
         }
      },
      "UnscheduledMaintenanceIncluded" : {
         "properties" : {
            "type" : {
               "type" : "string",
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "type",
            "id"
         ]
      },
      "CheckLinkage" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Linkage"
            },
            "data" : {
               "$ref" : "#/definitions/CheckReference"
            }
         }
      },
      "data_MediaReference" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/MediumReference"
               },
               "type" : "array"
            }
         }
      },
      "ContactLinkage" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/ContactReference"
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "Error" : {
         "properties" : {
            "detail" : {
               "type" : "string"
            },
            "status" : {
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         }
      },
      "ContactIncluded" : {
         "properties" : {
            "type" : {
               "type" : "string",
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "type",
            "id"
         ]
      },
      "ContactUpdate" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "timezone" : {
               "format" : "tzinfo",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/ContactUpdateLinks"
            },
            "type" : {
               "enum" : [
                  "contact"
               ],
               "type" : "string"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         }
      },
      "ContactsLinkage" : {
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ContactReference"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "UnscheduledMaintenanceReference" : {
         "properties" : {
            "type" : {
               "enum" : [
                  "unscheduled_maintenance"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "ChecksLinkage" : {
         "properties" : {
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/CheckReference"
               },
               "type" : "array"
            },
            "links" : {
               "$ref" : "#/definitions/Linkage"
            }
         }
      },
      "data_Acknowledgement" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "data" : {
               "$ref" : "#/definitions/Acknowledgement"
            }
         },
         "required" : [
            "data"
         ]
      },
      "data_Checks" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/CheckIncluded"
               },
               "type" : "array"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Check"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "ScheduledMaintenanceCreateLinks" : {
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/data_CheckReference"
            }
         },
         "required" : [
            "check"
         ]
      },
      "Tag" : {
         "required" : [
            "id",
            "type",
            "name"
         ],
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "type" : {
               "enum" : [
                  "tag"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/TagLinks"
            }
         }
      },
      "TestNotificationCreate" : {
         "properties" : {
            "summary" : {
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/TestNotificationCreateLinks"
            },
            "condition" : {
               "type" : "string",
               "enum" : [
                  "critical",
                  "warning",
                  "unknown"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "test_notification"
               ]
            }
         },
         "required" : [
            "type",
            "summary"
         ]
      },
      "AcknowledgementLinks" : {
         "properties" : {
            "tag" : {
               "$ref" : "#/definitions/TagLinkage"
            },
            "check" : {
               "$ref" : "#/definitions/CheckLinkage"
            }
         }
      },
      "TagReference" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "type" : {
               "enum" : [
                  "tag"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         }
      },
      "data_Contact" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/Contact"
            },
            "included" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/ContactIncluded"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         },
         "required" : [
            "data"
         ]
      },
      "data_States" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/State"
               },
               "type" : "array"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/StateIncluded"
               },
               "type" : "array"
            }
         }
      },
      "data_Rule" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/Rule"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/RuleIncluded"
               },
               "type" : "array"
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         },
         "required" : [
            "data"
         ]
      },
      "data_ScheduledMaintenances" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/ScheduledMaintenanceIncluded"
               },
               "type" : "array"
            },
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/ScheduledMaintenance"
               },
               "type" : "array"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            }
         },
         "required" : [
            "data"
         ]
      },
      "UnscheduledMaintenanceLinkage" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Linkage"
            },
            "data" : {
               "$ref" : "#/definitions/UnscheduledMaintenanceReference"
            }
         }
      },
      "MetricsCheckCounts" : {
         "properties" : {
            "enabled" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "failing" : {
               "type" : "integer",
               "minimum" : 0
            },
            "all" : {
               "minimum" : 0,
               "type" : "integer"
            }
         },
         "required" : [
            "all",
            "enabled",
            "failing"
         ]
      },
      "Errors" : {
         "properties" : {
            "errors" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/Error"
               }
            }
         }
      },
      "data_TagReference" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/TagReference"
            }
         },
         "required" : [
            "data"
         ]
      },
      "RuleUpdate" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "enabled" : {
               "type" : "boolean"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "rule"
               ]
            },
            "blackhole" : {
               "type" : "boolean"
            },
            "conditions_list" : {
               "type" : "string"
            },
            "strategy" : {
               "enum" : [
                  "global",
                  "any_tag",
                  "all_tags",
                  "no_tag"
               ],
               "type" : "string"
            },
            "name" : {
               "type" : "string"
            },
            "time_restriction_ical" : {
               "type" : "string"
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/RuleUpdateLinks"
            }
         }
      },
      "TestNotification" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "summary" : {
               "type" : "string"
            },
            "relationships" : {
               "$ref" : "#/definitions/TestNotificationLinks"
            },
            "condition" : {
               "enum" : [
                  "critical",
                  "warning",
                  "unknown"
               ],
               "type" : "string"
            },
            "type" : {
               "enum" : [
                  "test_notification"
               ],
               "type" : "string"
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         }
      },
      "data_CheckReference" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/CheckReference"
            }
         }
      },
      "CheckIncluded" : {
         "required" : [
            "type",
            "id"
         ],
         "properties" : {
            "type" : {
               "type" : "string",
               "enum" : [
                  "check",
                  "contact",
                  "medium",
                  "rule",
                  "scheduled_maintenance",
                  "state",
                  "tag",
                  "unscheduled_maintenance"
               ]
            },
            "id" : {
               "type" : "string",
               "format" : "uuid"
            }
         }
      },
      "CheckReference" : {
         "properties" : {
            "type" : {
               "type" : "string",
               "enum" : [
                  "check"
               ]
            },
            "id" : {
               "format" : "uuid",
               "type" : "string"
            }
         },
         "required" : [
            "id",
            "type"
         ]
      },
      "Meta" : {
         "properties" : {
            "pagination" : {
               "$ref" : "#/definitions/Pagination"
            }
         }
      },
      "data_UnscheduledMaintenances" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/UnscheduledMaintenanceIncluded"
               },
               "type" : "array"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/UnscheduledMaintenance"
               }
            }
         },
         "required" : [
            "data"
         ]
      },
      "RuleUpdateLinks" : {
         "properties" : {
            "tags" : {
               "$ref" : "#/definitions/data_TagsReference"
            },
            "media" : {
               "$ref" : "#/definitions/data_MediaReference"
            }
         }
      },
      "data_Statistic" : {
         "properties" : {
            "data" : {
               "$ref" : "#/definitions/Statistic"
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         },
         "required" : [
            "data"
         ]
      },
      "data_RulesReference" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/RuleReference"
               },
               "type" : "array"
            }
         }
      },
      "MetricsProcessedEventCounts" : {
         "properties" : {
            "action_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "all_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "ok_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "invalid_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "failure_events" : {
               "minimum" : 0,
               "type" : "integer"
            }
         },
         "required" : [
            "all_events",
            "ok_events",
            "failure_events",
            "action_events",
            "invalid_events"
         ]
      },
      "data_Media" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "items" : {
                  "$ref" : "#/definitions/Medium"
               },
               "type" : "array"
            },
            "meta" : {
               "$ref" : "#/definitions/Meta"
            },
            "included" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/MediumIncluded"
               }
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         }
      },
      "Statistic" : {
         "required" : [
            "id",
            "type",
            "instance_name",
            "created_at",
            "all_events",
            "ok_events",
            "failure_events",
            "action_events"
         ],
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "all_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "created_at" : {
               "format" : "date-time",
               "type" : "string"
            },
            "invalid_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "ok_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "instance_name" : {
               "type" : "string"
            },
            "type" : {
               "type" : "string",
               "enum" : [
                  "statistic"
               ]
            },
            "action_events" : {
               "minimum" : 0,
               "type" : "integer"
            },
            "failure_events" : {
               "minimum" : 0,
               "type" : "integer"
            }
         }
      },
      "data_ChecksReference" : {
         "required" : [
            "data"
         ],
         "properties" : {
            "data" : {
               "type" : "array",
               "items" : {
                  "$ref" : "#/definitions/CheckReference"
               }
            }
         }
      },
      "TestNotificationLinks" : {
         "properties" : {
            "check" : {
               "$ref" : "#/definitions/CheckLinkage"
            },
            "tag" : {
               "$ref" : "#/definitions/TagLinkage"
            }
         }
      },
      "data_Medium" : {
         "properties" : {
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/MediumIncluded"
               },
               "type" : "array"
            },
            "data" : {
               "$ref" : "#/definitions/Medium"
            },
            "links" : {
               "$ref" : "#/definitions/Links"
            }
         },
         "required" : [
            "data"
         ]
      },
      "MediumLinks" : {
         "properties" : {
            "rules" : {
               "$ref" : "#/definitions/RulesLinkage"
            },
            "contact" : {
               "$ref" : "#/definitions/ContactLinkage"
            }
         },
         "required" : [
            "contact",
            "rules"
         ]
      },
      "data_Tag" : {
         "properties" : {
            "links" : {
               "$ref" : "#/definitions/Links"
            },
            "data" : {
               "$ref" : "#/definitions/Tag"
            },
            "included" : {
               "items" : {
                  "$ref" : "#/definitions/TagIncluded"
               },
               "type" : "array"
            }
         },
         "required" : [
            "data"
         ]
      },
      "MediumReference" : {
         "required" : [
            "id",
            "type"
         ],
         "properties" : {
            "id" : {
               "format" : "uuid",
               "type" : "string"
            },
            "type" : {
               "enum" : [
                  "medium"
               ],
               "type" : "string"
            }
         }
      }
   },
   "swagger" : "2.0",
   "produces" : [
      "application/vnd.api+json"
   ],
   "paths" : {
      "/rules/{rule_id}/relationships/tags" : {
         "delete" : {
            "operationId" : "remove_rule_tags",
            "responses" : {
               "204" : {
                  "description" : "No Content; link deletion success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete associations between tags and this rule.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "rule_id",
                  "description" : "Id of a rule",
                  "required" : true,
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  },
                  "name" : "data",
                  "description" : "tags to remove from the rule",
                  "required" : true
               }
            ]
         },
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "rule_id",
                  "required" : true,
                  "description" : "Id of a rule"
               }
            ],
            "description" : "Returns all tags linked to this rule.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET rules response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_rule_links_tags"
         },
         "post" : {
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "add_rule_tags",
            "description" : "Associate tags with this rule.",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a rule",
                  "required" : true,
                  "name" : "rule_id",
                  "in" : "path"
               },
               {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "tags to associate with the rule",
                  "in" : "body"
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "patch" : {
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a rule",
                  "required" : true,
                  "name" : "rule_id",
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "tags associations to replace for the rule",
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  }
               }
            ],
            "description" : "Update the tags associated with this rule.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "operationId" : "replace_rule_tags",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               }
            }
         }
      },
      "/tags/{tag_id}/contacts" : {
         "get" : {
            "operationId" : "get_tag_contacts",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET tags response"
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns all contacts linked to this tag.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/states" : {
         "get" : {
            "operationId" : "get_check_states",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     }
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns all state records for the check; default sort order is newest first.",
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "type" : "string"
               }
            ]
         }
      },
      "/states/{state_id}/check" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET states check success",
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_state_check",
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a state",
                  "name" : "state_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns the check the state data describes.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/relationships/contacts" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_check_links_contacts",
            "description" : "Returns contacts whose notification rules will allow them to receive notifications for events on this check.",
            "parameters" : [
               {
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/current_scheduled_maintenances" : {
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "check_id",
                  "description" : "Id of a check",
                  "required" : true,
                  "in" : "path"
               }
            ],
            "description" : "Returns scheduled maintenance periods currently in  effect for this check.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_check_current_scheduled_maintenances",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET checks response"
               }
            }
         }
      },
      "/scheduled_maintenances" : {
         "post" : {
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_ScheduledMaintenance"
                  },
                  "description" : "scheduled_maintenance creation success"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "create_scheduled_maintenance",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Create a scheduled maintenance period for a check, or checks associated with a tag.",
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "scheduled_maintenance to create",
                  "schema" : {
                     "$ref" : "#/definitions/ScheduledMaintenanceCreate"
                  },
                  "name" : "data"
               }
            ]
         },
         "delete" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; scheduled_maintenances deletion succeeded"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "delete_scheduled_maintenances",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "scheduled_maintenances to delete",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     },
                     "type" : "array"
                  }
               }
            ],
            "description" : "Delete scheduled maintenance periods."
         },
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET scheduled_maintenances success",
                  "schema" : {
                     "$ref" : "#/definitions/data_ScheduledMaintenances"
                  }
               }
            },
            "operationId" : "get_all_scheduled_maintenances",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "name" : "sort",
                  "required" : false,
                  "description" : "",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "description" : "",
                  "required" : false,
                  "collectionFormat" : "multi",
                  "name" : "filter",
                  "items" : {
                     "format" : "filter",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               {
                  "type" : "string",
                  "name" : "include",
                  "description" : "",
                  "required" : false,
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "name" : "page",
                  "required" : false,
                  "description" : "Page number",
                  "type" : "integer"
               },
               {
                  "in" : "query",
                  "name" : "per_page",
                  "required" : false,
                  "description" : "Number of scheduled_maintenances per page",
                  "type" : "integer"
               }
            ],
            "description" : "Get data for multiple scheduled maintenance periods."
         },
         "patch" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; scheduled_maintenances update succeeded"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "update_scheduled_maintenances",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "description" : "Update data for scheduled maintenance periods.",
            "parameters" : [
               {
                  "in" : "body",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceUpdate"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "scheduled_maintenances to update"
               }
            ]
         }
      },
      "/rules/{rule_id}/media" : {
         "get" : {
            "operationId" : "get_rule_media",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     }
                  },
                  "description" : "GET rules response"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "description" : "Get the media this rule is associated with.",
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "rule_id",
                  "required" : true,
                  "description" : "Id of a rule",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/relationships/current_unscheduled_maintenance" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json"
            ],
            "description" : "If the check is currently acknowledged, returns the unscheduled maintenance period created for that.",
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "check_id",
                  "description" : "Id of a check",
                  "required" : true,
                  "type" : "string"
               }
            ],
            "operationId" : "get_check_current_unscheduled_maintenance",
            "responses" : {
               "200" : {
                  "description" : "GET checks success",
                  "schema" : {
                     "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/tags/{tag_id}/states" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns all state records for all checks linked to this tag; default sort order is newest first.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path"
               }
            ],
            "operationId" : "get_tag_states",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET tags response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            }
         }
      },
      "/scheduled_maintenances/{scheduled_maintenance_id}" : {
         "get" : {
            "operationId" : "get_scheduled_maintenance",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_ScheduledMaintenance"
                  },
                  "description" : "GET scheduled_maintenance response"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "parameters" : [
               {
                  "format" : "uuid",
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a scheduled_maintenance",
                  "name" : "scheduled_maintenance_id",
                  "in" : "path"
               },
               {
                  "name" : "fields",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "description" : "Get data for a scheduled maintenance period.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         },
         "delete" : {
            "operationId" : "delete_scheduled_maintenance",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; ScheduledMaintenance deletion success"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "format" : "uuid",
                  "in" : "path",
                  "name" : "scheduled_maintenance_id",
                  "description" : "Id of a scheduled_maintenance",
                  "required" : true
               }
            ],
            "description" : "Delete a scheduled maintenance period."
         },
         "patch" : {
            "operationId" : "update_scheduled_maintenance",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; ScheduledMaintenance update success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "name" : "scheduled_maintenance_id",
                  "description" : "Id of a scheduled_maintenance",
                  "required" : true,
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "$ref" : "#/definitions/ScheduledMaintenanceUpdate"
                  },
                  "name" : "data",
                  "description" : "ScheduledMaintenance to update",
                  "required" : true
               }
            ],
            "description" : "Update data for a scheduled maintenance period."
         }
      },
      "/contacts/{contact_id}/relationships/checks" : {
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "contact_id",
                  "required" : true,
                  "description" : "Id of a contact"
               }
            ],
            "description" : "Returns checks which this contact's notification rules allow it to receive notifications.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_contact_links_checks"
         }
      },
      "/unscheduled_maintenances" : {
         "delete" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; unscheduled_maintenances deletion succeeded"
               }
            },
            "operationId" : "delete_unscheduled_maintenances",
            "description" : "Delete unscheduled maintenance periods.",
            "parameters" : [
               {
                  "in" : "body",
                  "description" : "unscheduled_maintenances to delete",
                  "required" : true,
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ]
         },
         "get" : {
            "operationId" : "get_all_unscheduled_maintenances",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_UnscheduledMaintenances"
                  },
                  "description" : "GET unscheduled_maintenances success"
               }
            },
            "parameters" : [
               {
                  "name" : "fields",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "name" : "sort",
                  "required" : false,
                  "description" : "",
                  "type" : "string"
               },
               {
                  "required" : false,
                  "description" : "",
                  "collectionFormat" : "multi",
                  "name" : "filter",
                  "in" : "query",
                  "items" : {
                     "type" : "string",
                     "format" : "filter"
                  },
                  "type" : "array"
               },
               {
                  "required" : false,
                  "description" : "",
                  "name" : "include",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "page",
                  "description" : "Page number",
                  "required" : false
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "description" : "Number of unscheduled_maintenances per page",
                  "required" : false,
                  "name" : "per_page"
               }
            ],
            "description" : "Get data for multiple unscheduled maintenance periods.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         },
         "patch" : {
            "description" : "Update data for unscheduled maintenance periods.",
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "unscheduled_maintenances to update",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceUpdate"
                     }
                  },
                  "name" : "data"
               }
            ],
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "operationId" : "update_unscheduled_maintenances",
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; unscheduled_maintenances update succeeded"
               },
               "409" : {
                  "description" : "Conflict; request id mismatch",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         }
      },
      "/checks/{check_id}/alerting_media" : {
         "get" : {
            "operationId" : "get_check_alerting_media",
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     }
                  },
                  "description" : "GET checks response"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "While this check is failing, returns media records which are receiving notifications during this failure.",
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check"
               }
            ]
         }
      },
      "/checks/{check_id}/relationships/tags" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check"
               }
            ],
            "description" : "Returns all tags linked to this check.",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  }
               }
            },
            "operationId" : "get_check_links_tags"
         },
         "delete" : {
            "parameters" : [
               {
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check",
                  "in" : "path",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "tags to remove from the check",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "description" : "Delete associations between tags and this check.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "operationId" : "remove_check_tags",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; link deletion success"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         },
         "post" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link creation success"
               }
            },
            "operationId" : "add_check_tags",
            "parameters" : [
               {
                  "name" : "check_id",
                  "description" : "Id of a check",
                  "required" : true,
                  "in" : "path",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "tags to associate with the check",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  }
               }
            ],
            "description" : "Associate tags with this check.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "patch" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check"
               },
               {
                  "in" : "body",
                  "description" : "tags associations to replace for the check",
                  "required" : true,
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "description" : "Update the tags associated with this check.",
            "operationId" : "replace_check_tags",
            "responses" : {
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/checks/{check_id}/relationships/current_state" : {
         "get" : {
            "operationId" : "get_check_current_state",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/StateReference"
                  },
                  "description" : "GET checks success"
               }
            },
            "produces" : [
               "application/vnd.api+json"
            ],
            "description" : "Returns the current State record for this check.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check",
                  "in" : "path"
               }
            ]
         }
      },
      "/unscheduled_maintenances/{unscheduled_maintenance_id}/relationships/check" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET unscheduled_maintenances success",
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_unscheduled_maintenance_check",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a unscheduled_maintenance",
                  "required" : true,
                  "name" : "unscheduled_maintenance_id",
                  "in" : "path"
               }
            ],
            "description" : "Returns the check an unscheduled maintenance period applies to.",
            "produces" : [
               "application/vnd.api+json"
            ]
         }
      },
      "/scheduled_maintenances/{scheduled_maintenance_id}/check" : {
         "get" : {
            "description" : "Returns the check a scheduled maintenance period applies to.",
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a scheduled_maintenance",
                  "name" : "scheduled_maintenance_id"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  },
                  "description" : "GET scheduled_maintenances check success"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_scheduled_maintenance_check"
         }
      },
      "/rules/{rule_id}/contact" : {
         "get" : {
            "description" : "Get the contact a rule belongs to.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a rule",
                  "name" : "rule_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_rule_contact",
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET rules contact success",
                  "schema" : {
                     "$ref" : "#/definitions/ContactReference"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/tags/{tag_id}/relationships/checks" : {
         "post" : {
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag"
               },
               {
                  "required" : true,
                  "description" : "checks to associate with the tag",
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  },
                  "in" : "body"
               }
            ],
            "description" : "Associate checks with this tag.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "operationId" : "add_tag_checks",
            "responses" : {
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         },
         "get" : {
            "description" : "Returns all checks linked to this tag.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "tag_id",
                  "description" : "Id of a tag",
                  "required" : true,
                  "in" : "path"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_tag_links_checks"
         },
         "delete" : {
            "description" : "Delete associations between checks and this tag.",
            "parameters" : [
               {
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "description" : "checks to remove from the tag",
                  "required" : true,
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  }
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link deletion success"
               }
            },
            "operationId" : "remove_tag_checks"
         },
         "patch" : {
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id"
               },
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     },
                     "type" : "array"
                  },
                  "required" : true,
                  "description" : "checks associations to replace for the tag"
               }
            ],
            "description" : "Update the checks associated with this tag.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "responses" : {
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "replace_tag_checks"
         }
      },
      "/media/{medium_id}/rules" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Get the rules this medium is associated with.",
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a medium",
                  "name" : "medium_id",
                  "in" : "path"
               }
            ],
            "operationId" : "get_medium_rules",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET media response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  }
               }
            }
         }
      },
      "/media/{medium_id}/relationships/alerting_checks" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns all checks that have alerted through a medium (that are still failing.",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a medium",
                  "required" : true,
                  "name" : "medium_id",
                  "in" : "path"
               }
            ],
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "description" : "GET media response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_medium_links_alerting_checks"
         }
      },
      "/media/{medium_id}/contact" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "medium_id",
                  "description" : "Id of a medium",
                  "required" : true
               }
            ],
            "description" : "Get the contact a medium belongs to.",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/ContactReference"
                  },
                  "description" : "GET media contact success"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_medium_contact"
         }
      },
      "/tags/{tag_id}/relationships/contacts" : {
         "patch" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     }
                  },
                  "name" : "data",
                  "description" : "contacts associations to replace for the tag",
                  "required" : true
               }
            ],
            "description" : "Update the contacts associated with this tag.",
            "operationId" : "replace_tag_contacts",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link update succeeded"
               }
            }
         },
         "delete" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete associations between contacts and this tag.",
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id",
                  "type" : "string"
               },
               {
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     },
                     "type" : "array"
                  },
                  "required" : true,
                  "description" : "contacts to remove from the tag",
                  "in" : "body"
               }
            ],
            "operationId" : "remove_tag_contacts",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link deletion success"
               }
            }
         },
         "get" : {
            "description" : "Returns all contacts linked to this tag.",
            "parameters" : [
               {
                  "name" : "tag_id",
                  "description" : "Id of a tag",
                  "required" : true,
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_tag_links_contacts"
         },
         "post" : {
            "responses" : {
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "add_tag_contacts",
            "description" : "Associate contacts with this tag.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id",
                  "in" : "path",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "description" : "contacts to associate with the tag",
                  "required" : true,
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     }
                  }
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         }
      },
      "/checks" : {
         "patch" : {
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "parameters" : [
               {
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/CheckUpdate"
                     },
                     "type" : "array"
                  },
                  "description" : "checks to update",
                  "required" : true,
                  "in" : "body"
               }
            ],
            "description" : "Update checks.",
            "operationId" : "update_checks",
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "204" : {
                  "description" : "No Content; checks update succeeded"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         },
         "delete" : {
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "parameters" : [
               {
                  "required" : true,
                  "description" : "checks to delete",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "description" : "Delete checks.",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; checks deletion succeeded"
               }
            },
            "operationId" : "delete_checks"
         },
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns data for multiple check records.",
            "parameters" : [
               {
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "description" : "",
                  "required" : false,
                  "name" : "sort",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "name" : "filter",
                  "collectionFormat" : "multi",
                  "required" : false,
                  "description" : "",
                  "in" : "query",
                  "type" : "array",
                  "items" : {
                     "format" : "filter",
                     "type" : "string"
                  }
               },
               {
                  "type" : "string",
                  "name" : "include",
                  "description" : "",
                  "required" : false,
                  "in" : "query"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "page",
                  "required" : false,
                  "description" : "Page number"
               },
               {
                  "type" : "integer",
                  "description" : "Number of checks per page",
                  "required" : false,
                  "name" : "per_page",
                  "in" : "query"
               }
            ],
            "operationId" : "get_all_checks",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Checks"
                  },
                  "description" : "GET checks success"
               }
            }
         },
         "post" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Create a check.",
            "parameters" : [
               {
                  "in" : "body",
                  "description" : "check to create",
                  "required" : true,
                  "schema" : {
                     "$ref" : "#/definitions/CheckCreate"
                  },
                  "name" : "data"
               }
            ],
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "check creation success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Check"
                  }
               }
            },
            "operationId" : "create_check"
         }
      },
      "/tags/{tag_id}" : {
         "patch" : {
            "operationId" : "update_tag",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "204" : {
                  "description" : "No Content; Tag update success"
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "tag_id",
                  "description" : "Id of a tag",
                  "required" : true,
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "$ref" : "#/definitions/TagUpdate"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "Tag to update"
               }
            ],
            "description" : "Update a tag.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "get" : {
            "description" : "Returns data for a tag.",
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "Id of a tag",
                  "required" : true,
                  "name" : "tag_id",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "type" : "string",
                  "name" : "fields",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "in" : "query"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_tag",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Tag"
                  },
                  "description" : "GET tag response"
               }
            }
         },
         "delete" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete a tag.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id",
                  "in" : "path",
                  "type" : "string",
                  "format" : "uuid"
               }
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; Tag deletion success"
               }
            },
            "operationId" : "delete_tag"
         }
      },
      "/rules/{rule_id}/tags" : {
         "get" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET rules response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  }
               }
            },
            "operationId" : "get_rule_tags",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "rule_id",
                  "required" : true,
                  "description" : "Id of a rule",
                  "type" : "string"
               }
            ],
            "description" : "Returns all tags linked to this rule."
         }
      },
      "/statistics" : {
         "get" : {
            "operationId" : "get_all_statistics",
            "responses" : {
               "200" : {
                  "description" : "GET statistics success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Statistics"
                  }
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns global or per-instance event statistics.",
            "parameters" : [
               {
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "type" : "string",
                  "name" : "sort",
                  "required" : false,
                  "description" : "",
                  "in" : "query"
               },
               {
                  "name" : "filter",
                  "collectionFormat" : "multi",
                  "description" : "",
                  "required" : false,
                  "in" : "query",
                  "type" : "array",
                  "items" : {
                     "type" : "string",
                     "format" : "filter"
                  }
               },
               {
                  "description" : "",
                  "required" : false,
                  "name" : "include",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "name" : "page",
                  "description" : "Page number",
                  "required" : false,
                  "in" : "query",
                  "type" : "integer"
               },
               {
                  "in" : "query",
                  "required" : false,
                  "description" : "Number of statistics per page",
                  "name" : "per_page",
                  "type" : "integer"
               }
            ]
         }
      },
      "/checks/{check_id}/current_unscheduled_maintenance" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET checks current_unscheduled_maintenance success",
                  "schema" : {
                     "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_check_current_unscheduled_maintenance",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "description" : "If the check is currently acknowledged, returns the unscheduled maintenance period created for that."
         }
      },
      "/checks/{check_id}/unscheduled_maintenances" : {
         "get" : {
            "operationId" : "get_check_unscheduled_maintenances",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                     }
                  },
                  "description" : "GET checks response"
               }
            },
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check"
               }
            ],
            "description" : "Returns all unscheduled maintenance periods for the check; default sort order is newest first.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/unscheduled_maintenances/{unscheduled_maintenance_id}" : {
         "get" : {
            "operationId" : "get_unscheduled_maintenance",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET unscheduled_maintenance response",
                  "schema" : {
                     "$ref" : "#/definitions/data_UnscheduledMaintenance"
                  }
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "format" : "uuid",
                  "type" : "string",
                  "name" : "unscheduled_maintenance_id",
                  "required" : true,
                  "description" : "Id of a unscheduled_maintenance",
                  "in" : "path"
               },
               {
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "description" : "Get data for an un scheduled maintenance period."
         },
         "delete" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; UnscheduledMaintenance deletion success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "delete_unscheduled_maintenance",
            "parameters" : [
               {
                  "name" : "unscheduled_maintenance_id",
                  "required" : true,
                  "description" : "Id of a unscheduled_maintenance",
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               }
            ],
            "description" : "Delete an scheduled maintenance period.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "patch" : {
            "operationId" : "update_unscheduled_maintenance",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "204" : {
                  "description" : "No Content; UnscheduledMaintenance update success"
               },
               "409" : {
                  "description" : "Conflict; request id mismatch",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "Id of a unscheduled_maintenance",
                  "required" : true,
                  "name" : "unscheduled_maintenance_id",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "$ref" : "#/definitions/UnscheduledMaintenanceUpdate"
                  },
                  "required" : true,
                  "description" : "UnscheduledMaintenance to update"
               }
            ],
            "description" : "Update data for an unscheduled maintenance period.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         }
      },
      "/scheduled_maintenances/{scheduled_maintenance_id}/relationships/check" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json"
            ],
            "description" : "Returns the check a scheduled maintenance period applies to.",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a scheduled_maintenance",
                  "required" : true,
                  "name" : "scheduled_maintenance_id",
                  "in" : "path"
               }
            ],
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  },
                  "description" : "GET scheduled_maintenances success"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_scheduled_maintenance_check"
         }
      },
      "/states" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "query",
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "name" : "sort",
                  "required" : false,
                  "description" : "",
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "collectionFormat" : "multi",
                  "name" : "filter",
                  "required" : false,
                  "description" : "",
                  "type" : "array",
                  "items" : {
                     "format" : "filter",
                     "type" : "string"
                  }
               },
               {
                  "in" : "query",
                  "name" : "include",
                  "description" : "",
                  "required" : false,
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "name" : "page",
                  "description" : "Page number",
                  "required" : false,
                  "type" : "integer"
               },
               {
                  "in" : "query",
                  "name" : "per_page",
                  "required" : false,
                  "description" : "Number of states per page",
                  "type" : "integer"
               }
            ],
            "description" : "Get data for check state records.",
            "operationId" : "get_all_states",
            "responses" : {
               "200" : {
                  "description" : "GET states success",
                  "schema" : {
                     "$ref" : "#/definitions/data_States"
                  }
               }
            }
         }
      },
      "/media/{medium_id}/relationships/contact" : {
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "medium_id",
                  "description" : "Id of a medium",
                  "required" : true,
                  "in" : "path"
               }
            ],
            "description" : "Get the contact a medium belongs to.",
            "produces" : [
               "application/vnd.api+json"
            ],
            "operationId" : "get_medium_contact",
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET media success",
                  "schema" : {
                     "$ref" : "#/definitions/ContactReference"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         }
      },
      "/tags" : {
         "patch" : {
            "description" : "Update tags.",
            "parameters" : [
               {
                  "description" : "tags to update",
                  "required" : true,
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagUpdate"
                     }
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "204" : {
                  "description" : "No Content; tags update succeeded"
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               }
            },
            "operationId" : "update_tags"
         },
         "delete" : {
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "description" : "Delete tags.",
            "parameters" : [
               {
                  "in" : "body",
                  "description" : "tags to delete",
                  "required" : true,
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data"
               }
            ],
            "operationId" : "delete_tags",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; tags deletion succeeded"
               }
            }
         },
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET tags success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Tags"
                  }
               }
            },
            "operationId" : "get_all_tags",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "name" : "fields",
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "name" : "sort",
                  "description" : "",
                  "required" : false,
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "required" : false,
                  "description" : "",
                  "name" : "filter",
                  "collectionFormat" : "multi",
                  "items" : {
                     "format" : "filter",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               {
                  "name" : "include",
                  "description" : "",
                  "required" : false,
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "type" : "integer",
                  "required" : false,
                  "description" : "Page number",
                  "name" : "page",
                  "in" : "query"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "per_page",
                  "description" : "Number of tags per page",
                  "required" : false
               }
            ],
            "description" : "Returns data for tags."
         },
         "post" : {
            "operationId" : "create_tag",
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "200" : {
                  "description" : "tag creation success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Tag"
                  }
               }
            },
            "parameters" : [
               {
                  "name" : "data",
                  "schema" : {
                     "$ref" : "#/definitions/TagCreate"
                  },
                  "description" : "tag to create",
                  "required" : true,
                  "in" : "body"
               }
            ],
            "description" : "Create a tag.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/tags" : {
         "get" : {
            "operationId" : "get_check_tags",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET checks response"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns all tags linked to this check."
         }
      },
      "/tags/{tag_id}/relationships/states" : {
         "get" : {
            "operationId" : "get_tag_links_states",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     },
                     "type" : "array"
                  }
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag"
               }
            ],
            "description" : "Returns all state records for all checks linked to this tag; default sort order is newest first."
         }
      },
      "/contacts/{contact_id}/checks" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "description" : "Id of a contact",
                  "required" : true,
                  "name" : "contact_id"
               }
            ],
            "description" : "Returns checks which this contact's notification rules allow it to receive notifications.",
            "operationId" : "get_contact_checks",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            }
         }
      },
      "/states/{state_id}" : {
         "get" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET state response",
                  "schema" : {
                     "$ref" : "#/definitions/data_State"
                  }
               }
            },
            "operationId" : "get_state",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a state",
                  "name" : "state_id",
                  "in" : "path",
                  "type" : "string",
                  "format" : "uuid"
               },
               {
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "description" : "Get data for a single check state record.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/contacts/{contact_id}/rules" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns rules belonging to the contact.",
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id"
               }
            ],
            "responses" : {
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "get_contact_rules"
         }
      },
      "/contacts" : {
         "patch" : {
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "body",
                  "description" : "contacts to update",
                  "required" : true,
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ContactUpdate"
                     },
                     "type" : "array"
                  },
                  "name" : "data"
               }
            ],
            "description" : "Update contact records.",
            "operationId" : "update_contacts",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; contacts update succeeded"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               }
            }
         },
         "post" : {
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Contact"
                  },
                  "description" : "contact creation success"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               }
            },
            "operationId" : "create_contact",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Create a contact.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "contact to create",
                  "schema" : {
                     "$ref" : "#/definitions/ContactCreate"
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ]
         },
         "delete" : {
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "contacts to delete",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "description" : "Delete contacts.",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "responses" : {
               "204" : {
                  "description" : "No Content; contacts deletion succeeded"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  }
               }
            },
            "operationId" : "delete_contacts"
         },
         "get" : {
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Contacts"
                  },
                  "description" : "GET contacts success"
               }
            },
            "operationId" : "get_all_contacts",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "query",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "name" : "fields",
                  "type" : "string"
               },
               {
                  "type" : "string",
                  "in" : "query",
                  "description" : "",
                  "required" : false,
                  "name" : "sort"
               },
               {
                  "items" : {
                     "format" : "filter",
                     "type" : "string"
                  },
                  "type" : "array",
                  "required" : false,
                  "description" : "",
                  "collectionFormat" : "multi",
                  "name" : "filter",
                  "in" : "query"
               },
               {
                  "required" : false,
                  "description" : "",
                  "name" : "include",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "description" : "Page number",
                  "required" : false,
                  "name" : "page"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "per_page",
                  "required" : false,
                  "description" : "Number of contacts per page"
               }
            ],
            "description" : "Get data for multiple contacts."
         }
      },
      "/media/{medium_id}/relationships/rules" : {
         "post" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "add_medium_rules",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a medium",
                  "name" : "medium_id",
                  "in" : "path"
               },
               {
                  "description" : "rules to associate with the medium",
                  "required" : true,
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "description" : "Associate this medium with rules on medium creation."
         },
         "delete" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link deletion success"
               }
            },
            "operationId" : "remove_medium_rules",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a medium",
                  "name" : "medium_id",
                  "in" : "path"
               },
               {
                  "description" : "rules to remove from the medium",
                  "required" : true,
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     },
                     "type" : "array"
                  },
                  "in" : "body"
               }
            ],
            "description" : "Delete associations between this medium and rules."
         },
         "get" : {
            "operationId" : "get_medium_links_rules",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  },
                  "description" : "GET media response"
               }
            },
            "description" : "Get the rules this medium is associated with.",
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "medium_id",
                  "description" : "Id of a medium",
                  "required" : true,
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         },
         "patch" : {
            "operationId" : "replace_medium_rules",
            "responses" : {
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Update the rules this medium is associated with.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "medium_id",
                  "required" : true,
                  "description" : "Id of a medium",
                  "in" : "path"
               },
               {
                  "required" : true,
                  "description" : "rules associations to replace for the medium",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     },
                     "type" : "array"
                  },
                  "in" : "body"
               }
            ]
         }
      },
      "/rules" : {
         "patch" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "409" : {
                  "description" : "Conflict; request id mismatch",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; rules update succeeded"
               }
            },
            "operationId" : "update_rules",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "parameters" : [
               {
                  "required" : true,
                  "description" : "rules to update",
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleUpdate"
                     }
                  },
                  "in" : "body"
               }
            ],
            "description" : "Update notification rules."
         },
         "delete" : {
            "operationId" : "delete_rules",
            "responses" : {
               "204" : {
                  "description" : "No Content; rules deletion succeeded"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               }
            },
            "description" : "Delete notification rules.",
            "parameters" : [
               {
                  "in" : "body",
                  "description" : "rules to delete",
                  "required" : true,
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ]
         },
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "fields",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "in" : "query"
               },
               {
                  "type" : "string",
                  "name" : "sort",
                  "description" : "",
                  "required" : false,
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "description" : "",
                  "required" : false,
                  "name" : "filter",
                  "collectionFormat" : "multi",
                  "items" : {
                     "type" : "string",
                     "format" : "filter"
                  },
                  "type" : "array"
               },
               {
                  "in" : "query",
                  "name" : "include",
                  "required" : false,
                  "description" : "",
                  "type" : "string"
               },
               {
                  "type" : "integer",
                  "description" : "Page number",
                  "required" : false,
                  "name" : "page",
                  "in" : "query"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "per_page",
                  "required" : false,
                  "description" : "Number of rules per page"
               }
            ],
            "description" : "Get data for multiple notification rules.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Rules"
                  },
                  "description" : "GET rules success"
               }
            },
            "operationId" : "get_all_rules"
         },
         "post" : {
            "description" : "Create a notification rule.",
            "parameters" : [
               {
                  "description" : "rule to create",
                  "required" : true,
                  "schema" : {
                     "$ref" : "#/definitions/RuleCreate"
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               },
               "200" : {
                  "description" : "rule creation success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Rule"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               }
            },
            "operationId" : "create_rule"
         }
      },
      "/media" : {
         "patch" : {
            "operationId" : "update_media",
            "responses" : {
               "204" : {
                  "description" : "No Content; media update succeeded"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "409" : {
                  "description" : "Conflict; request id mismatch",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "media to update",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumUpdate"
                     },
                     "type" : "array"
                  }
               }
            ],
            "description" : "Update media records.",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ]
         },
         "get" : {
            "description" : "Returns data for media records.",
            "parameters" : [
               {
                  "in" : "query",
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields",
                  "type" : "string"
               },
               {
                  "name" : "sort",
                  "required" : false,
                  "description" : "",
                  "in" : "query",
                  "type" : "string"
               },
               {
                  "type" : "array",
                  "items" : {
                     "type" : "string",
                     "format" : "filter"
                  },
                  "name" : "filter",
                  "collectionFormat" : "multi",
                  "required" : false,
                  "description" : "",
                  "in" : "query"
               },
               {
                  "in" : "query",
                  "name" : "include",
                  "description" : "",
                  "required" : false,
                  "type" : "string"
               },
               {
                  "in" : "query",
                  "name" : "page",
                  "required" : false,
                  "description" : "Page number",
                  "type" : "integer"
               },
               {
                  "type" : "integer",
                  "in" : "query",
                  "name" : "per_page",
                  "description" : "Number of media per page",
                  "required" : false
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_all_media",
            "responses" : {
               "200" : {
                  "description" : "GET media success",
                  "schema" : {
                     "$ref" : "#/definitions/data_Media"
                  }
               }
            }
         },
         "delete" : {
            "parameters" : [
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     }
                  },
                  "required" : true,
                  "description" : "media to delete"
               }
            ],
            "description" : "Delete media records.",
            "consumes" : [
               "application/vnd.api+json; ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Error"
                  },
                  "description" : "Not Found"
               },
               "204" : {
                  "description" : "No Content; media deletion succeeded"
               }
            },
            "operationId" : "delete_media"
         },
         "post" : {
            "operationId" : "create_medium",
            "responses" : {
               "409" : {
                  "description" : "Conflict; bad request structure",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Medium"
                  },
                  "description" : "medium creation success"
               }
            },
            "parameters" : [
               {
                  "schema" : {
                     "$ref" : "#/definitions/MediumCreate"
                  },
                  "name" : "data",
                  "description" : "medium to create",
                  "required" : true,
                  "in" : "body"
               }
            ],
            "description" : "Create a media record.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         }
      },
      "/tags/{tag_id}/relationships/rules" : {
         "patch" : {
            "responses" : {
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "replace_tag_rules",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "rules associations to replace for the tag",
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  }
               }
            ],
            "description" : "Update the rules associated with this tag."
         },
         "post" : {
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "add_tag_rules",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a tag",
                  "required" : true,
                  "name" : "tag_id",
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "rules to associate with the tag",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  },
                  "name" : "data"
               }
            ],
            "description" : "Associate rules with this tag.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "delete" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; link deletion success"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "remove_tag_rules",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete associations between rules and this tag.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path"
               },
               {
                  "description" : "rules to remove from the tag",
                  "required" : true,
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     },
                     "type" : "array"
                  },
                  "in" : "body"
               }
            ]
         },
         "get" : {
            "operationId" : "get_tag_links_rules",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  },
                  "description" : "GET tags response"
               }
            },
            "parameters" : [
               {
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "description" : "Returns all rules linked to this tag.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/relationships/current_scheduled_maintenances" : {
         "get" : {
            "description" : "Returns scheduled maintenance periods currently in  effect for this check.",
            "parameters" : [
               {
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     }
                  }
               }
            },
            "operationId" : "get_check_links_current_scheduled_maintenances"
         }
      },
      "/tags/{tag_id}/relationships/unscheduled_maintenances" : {
         "get" : {
            "operationId" : "get_tag_links_unscheduled_maintenances",
            "responses" : {
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET tags response"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "Id of a tag",
                  "required" : true,
                  "name" : "tag_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns all unscheduled maintenance periods for checks linked to this tag; default sort order is newest first.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/tags/{tag_id}/scheduled_maintenances" : {
         "get" : {
            "description" : "Returns all scheduled maintenance periods for checks linked to this tag; default sort order is newest first.",
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     }
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_tag_scheduled_maintenances"
         }
      },
      "/contacts/{contact_id}/media" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "contact_id",
                  "description" : "Id of a contact",
                  "required" : true,
                  "in" : "path"
               }
            ],
            "description" : "Returns media belonging to the contact.",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_contact_media"
         }
      },
      "/checks/{check_id}/relationships/latest_notifications" : {
         "get" : {
            "operationId" : "get_check_links_latest_notifications",
            "responses" : {
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     }
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "description" : "Returns the most recent State records for each problem condition that produced notifications.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/test_notifications" : {
         "post" : {
            "operationId" : "create_test_notification",
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; bad request structure"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_TestNotification"
                  },
                  "description" : "test_notification creation success"
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "schema" : {
                     "$ref" : "#/definitions/TestNotificationCreate"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "test_notification to create",
                  "in" : "body"
               }
            ],
            "description" : "Create a simulated event for a check, or checks linked to a tag."
         }
      },
      "/unscheduled_maintenances/{unscheduled_maintenance_id}/check" : {
         "get" : {
            "parameters" : [
               {
                  "in" : "path",
                  "description" : "Id of a unscheduled_maintenance",
                  "required" : true,
                  "name" : "unscheduled_maintenance_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns the check an unscheduled maintenance period applies to.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_unscheduled_maintenance_check",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET unscheduled_maintenances check success",
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/acknowledgements" : {
         "post" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "$ref" : "#/definitions/AcknowledgementCreate"
                  },
                  "description" : "acknowledgement to create",
                  "required" : true
               }
            ],
            "description" : "Acknowledge a check, or acknowledge all checks linked to a tag.",
            "operationId" : "create_acknowledgement",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Acknowledgement"
                  },
                  "description" : "acknowledgement creation success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "409" : {
                  "description" : "Conflict; bad request structure",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/checks/{check_id}/relationships/scheduled_maintenances" : {
         "get" : {
            "operationId" : "get_check_links_scheduled_maintenances",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     }
                  },
                  "description" : "GET checks response"
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id"
               }
            ],
            "description" : "Returns all scheduled maintenance periods for the check; default sort order is newest first."
         }
      },
      "/checks/{check_id}/relationships/states" : {
         "get" : {
            "description" : "Returns all state records for the check; default sort order is newest first.",
            "parameters" : [
               {
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET checks response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_check_links_states"
         }
      },
      "/rules/{rule_id}/relationships/contact" : {
         "get" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET rules success",
                  "schema" : {
                     "$ref" : "#/definitions/ContactReference"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_rule_contact",
            "produces" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a rule",
                  "name" : "rule_id",
                  "type" : "string"
               }
            ],
            "description" : "Get the contact a rule belongs to."
         }
      },
      "/contacts/{contact_id}/relationships/tags" : {
         "patch" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "403" : {
                  "description" : "Forbidden; no link ids",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "replace_contact_tags",
            "description" : "Update the tags associated with this contact.",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a contact",
                  "required" : true,
                  "name" : "contact_id",
                  "in" : "path"
               },
               {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "tags associations to replace for the contact",
                  "in" : "body"
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "post" : {
            "description" : "Associate tags with this contact.",
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id",
                  "in" : "path"
               },
               {
                  "description" : "tags to associate with the contact",
                  "required" : true,
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ],
            "operationId" : "add_contact_tags",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         },
         "get" : {
            "operationId" : "get_contact_links_tags",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  },
                  "description" : "GET contacts response"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "description" : "Id of a contact",
                  "required" : true,
                  "name" : "contact_id"
               }
            ],
            "description" : "Returns all tags linked to this contact."
         },
         "delete" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a contact",
                  "required" : true,
                  "name" : "contact_id",
                  "in" : "path"
               },
               {
                  "name" : "data",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     }
                  },
                  "description" : "tags to remove from the contact",
                  "required" : true,
                  "in" : "body"
               }
            ],
            "description" : "Delete associations between tags and this contact.",
            "responses" : {
               "204" : {
                  "description" : "No Content; link deletion success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "remove_contact_tags"
         }
      },
      "/metrics" : {
         "get" : {
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Metrics"
                  },
                  "description" : "GET metrics response"
               }
            },
            "operationId" : "get_metrics",
            "description" : "Get metrics",
            "parameters" : [
               {
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "name" : "fields",
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/contacts" : {
         "get" : {
            "description" : "Returns contacts whose notification rules will allow them to receive notifications for events on this check.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "check_id",
                  "description" : "Id of a check",
                  "required" : true,
                  "in" : "path"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ContactReference"
                     }
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_check_contacts"
         }
      },
      "/checks/{check_id}" : {
         "patch" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Update a check.",
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "type" : "string",
                  "format" : "uuid"
               },
               {
                  "required" : true,
                  "description" : "Check to update",
                  "schema" : {
                     "$ref" : "#/definitions/CheckUpdate"
                  },
                  "name" : "data",
                  "in" : "body"
               }
            ],
            "operationId" : "update_check",
            "responses" : {
               "204" : {
                  "description" : "No Content; Check update success"
               },
               "403" : {
                  "description" : "Forbidden; invalid data",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         },
         "delete" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; Check deletion success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "delete_check",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete a check.",
            "parameters" : [
               {
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id",
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               }
            ]
         },
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns data for a check.",
            "parameters" : [
               {
                  "type" : "string",
                  "format" : "uuid",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check",
                  "in" : "path"
               },
               {
                  "type" : "string",
                  "in" : "query",
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields"
               }
            ],
            "operationId" : "get_check",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Check"
                  },
                  "description" : "GET check response"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/contacts/{contact_id}/relationships/media" : {
         "get" : {
            "operationId" : "get_contact_links_media",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET contacts response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "description" : "Returns media belonging to the contact.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "contact_id",
                  "required" : true,
                  "description" : "Id of a contact",
                  "in" : "path"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/rules/{rule_id}/relationships/media" : {
         "post" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; link creation success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               }
            },
            "operationId" : "add_rule_media",
            "description" : "Associate this rule with media on rule creation.",
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a rule",
                  "required" : true,
                  "name" : "rule_id",
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "required" : true,
                  "description" : "media to associate with the rule",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data"
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "delete" : {
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a rule",
                  "name" : "rule_id",
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  },
                  "name" : "data",
                  "required" : true,
                  "description" : "media to remove from the rule"
               }
            ],
            "description" : "Delete associations between this rule and media.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link deletion success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "remove_rule_media"
         },
         "get" : {
            "operationId" : "get_rule_links_media",
            "responses" : {
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET rules response"
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "description" : "Get the media this rule is associated with.",
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a rule",
                  "name" : "rule_id",
                  "in" : "path"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         },
         "patch" : {
            "operationId" : "replace_rule_media",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; no link ids"
               },
               "204" : {
                  "description" : "No Content; link update succeeded"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "rule_id",
                  "description" : "Id of a rule",
                  "required" : true,
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     },
                     "type" : "array"
                  },
                  "required" : true,
                  "description" : "media associations to replace for the rule"
               }
            ],
            "description" : "Update the media this rule is associated with."
         }
      },
      "/contacts/{contact_id}/relationships/rules" : {
         "get" : {
            "responses" : {
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "get_contact_links_rules",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id",
                  "in" : "path"
               }
            ],
            "description" : "Returns rules belonging to the contact."
         }
      },
      "/checks/{check_id}/current_state" : {
         "get" : {
            "operationId" : "get_check_current_state",
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/StateReference"
                  },
                  "description" : "GET checks current_state success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check"
               }
            ],
            "description" : "Returns the current State record for this check."
         }
      },
      "/states/{state_id}/relationships/check" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json"
            ],
            "description" : "Returns the check the state data describes.",
            "parameters" : [
               {
                  "type" : "string",
                  "required" : true,
                  "description" : "Id of a state",
                  "name" : "state_id",
                  "in" : "path"
               }
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET states success",
                  "schema" : {
                     "$ref" : "#/definitions/CheckReference"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_state_check"
         }
      },
      "/tags/{tag_id}/relationships/scheduled_maintenances" : {
         "get" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     }
                  },
                  "description" : "GET tags response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               }
            },
            "operationId" : "get_tag_links_scheduled_maintenances",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a tag",
                  "name" : "tag_id",
                  "type" : "string"
               }
            ],
            "description" : "Returns all scheduled maintenance periods for checks linked to this tag; default sort order is newest first."
         }
      },
      "/checks/{check_id}/latest_notifications" : {
         "get" : {
            "operationId" : "get_check_latest_notifications",
            "responses" : {
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "description" : "GET checks response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/StateReference"
                     }
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "check_id",
                  "description" : "Id of a check",
                  "required" : true
               }
            ],
            "description" : "Returns the most recent State records for each problem condition that produced notifications.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/scheduled_maintenances" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Returns all scheduled maintenance periods for the check; default sort order is newest first.",
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "check_id",
                  "required" : true,
                  "description" : "Id of a check",
                  "type" : "string"
               }
            ],
            "operationId" : "get_check_scheduled_maintenances",
            "responses" : {
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/ScheduledMaintenanceReference"
                     },
                     "type" : "array"
                  },
                  "description" : "GET checks response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/rules/{rule_id}" : {
         "patch" : {
            "consumes" : [
               "application/vnd.api+json"
            ],
            "parameters" : [
               {
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a rule",
                  "name" : "rule_id",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "name" : "data",
                  "schema" : {
                     "$ref" : "#/definitions/RuleUpdate"
                  },
                  "required" : true,
                  "description" : "Rule to update"
               }
            ],
            "description" : "Update a notification rule.",
            "operationId" : "update_rule",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "409" : {
                  "description" : "Conflict; request id mismatch",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "204" : {
                  "description" : "No Content; Rule update success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               }
            }
         },
         "delete" : {
            "operationId" : "delete_rule",
            "responses" : {
               "204" : {
                  "description" : "No Content; Rule deletion success"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Delete a notification rule.",
            "parameters" : [
               {
                  "format" : "uuid",
                  "type" : "string",
                  "name" : "rule_id",
                  "description" : "Id of a rule",
                  "required" : true,
                  "in" : "path"
               }
            ]
         },
         "get" : {
            "description" : "Get data for a notification rule.",
            "parameters" : [
               {
                  "description" : "Id of a rule",
                  "required" : true,
                  "name" : "rule_id",
                  "in" : "path",
                  "type" : "string",
                  "format" : "uuid"
               },
               {
                  "type" : "string",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "name" : "fields",
                  "in" : "query"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET rule response",
                  "schema" : {
                     "$ref" : "#/definitions/data_Rule"
                  }
               }
            },
            "operationId" : "get_rule"
         }
      },
      "/media/{medium_id}" : {
         "get" : {
            "description" : "Returns data for a media record.",
            "parameters" : [
               {
                  "type" : "string",
                  "format" : "uuid",
                  "name" : "medium_id",
                  "description" : "Id of a medium",
                  "required" : true,
                  "in" : "path"
               },
               {
                  "name" : "fields",
                  "description" : "Comma-separated list of fields to return",
                  "required" : false,
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_medium",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/data_Medium"
                  },
                  "description" : "GET medium response"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         },
         "delete" : {
            "operationId" : "delete_medium",
            "responses" : {
               "204" : {
                  "description" : "No Content; Medium deletion success"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "description" : "Delete a media record.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a medium",
                  "name" : "medium_id",
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               }
            ],
            "consumes" : [
               "application/vnd.api+json"
            ]
         },
         "patch" : {
            "responses" : {
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "204" : {
                  "description" : "No Content; Medium update success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "operationId" : "update_medium",
            "parameters" : [
               {
                  "type" : "string",
                  "format" : "uuid",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a medium",
                  "name" : "medium_id"
               },
               {
                  "description" : "Medium to update",
                  "required" : true,
                  "name" : "data",
                  "schema" : {
                     "$ref" : "#/definitions/MediumUpdate"
                  },
                  "in" : "body"
               }
            ],
            "description" : "Update a media record.",
            "consumes" : [
               "application/vnd.api+json"
            ]
         }
      },
      "/tags/{tag_id}/unscheduled_maintenances" : {
         "get" : {
            "description" : "Returns all unscheduled maintenance periods for checks linked to this tag; default sort order is newest first.",
            "parameters" : [
               {
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                     },
                     "type" : "array"
                  }
               }
            },
            "operationId" : "get_tag_unscheduled_maintenances"
         }
      },
      "/tags/{tag_id}/rules" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path"
               }
            ],
            "description" : "Returns all rules linked to this tag.",
            "operationId" : "get_tag_rules",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET tags response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/RuleReference"
                     }
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/tags/{tag_id}/checks" : {
         "get" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  },
                  "description" : "GET tags response"
               }
            },
            "operationId" : "get_tag_checks",
            "description" : "Returns all checks linked to this tag.",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "tag_id",
                  "required" : true,
                  "description" : "Id of a tag",
                  "in" : "path"
               }
            ],
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/contacts/{contact_id}/tags" : {
         "get" : {
            "operationId" : "get_contact_tags",
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "200" : {
                  "description" : "GET contacts response",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/TagReference"
                     },
                     "type" : "array"
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            },
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "description" : "Returns all tags linked to this contact.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/relationships/unscheduled_maintenances" : {
         "get" : {
            "responses" : {
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/UnscheduledMaintenanceReference"
                     }
                  },
                  "description" : "GET checks response"
               }
            },
            "operationId" : "get_check_links_unscheduled_maintenances",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a check",
                  "name" : "check_id",
                  "in" : "path",
                  "type" : "string"
               }
            ],
            "description" : "Returns all unscheduled maintenance periods for the check; default sort order is newest first.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ]
         }
      },
      "/checks/{check_id}/relationships/alerting_media" : {
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "type" : "string",
                  "description" : "Id of a check",
                  "required" : true,
                  "name" : "check_id",
                  "in" : "path"
               }
            ],
            "description" : "While this check is failing, returns media records which are receiving notifications during this failure.",
            "operationId" : "get_check_links_alerting_media",
            "responses" : {
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/MediumReference"
                     }
                  },
                  "description" : "GET checks response"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid request"
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/contacts/{contact_id}" : {
         "patch" : {
            "responses" : {
               "204" : {
                  "description" : "No Content; Contact update success"
               },
               "403" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Forbidden; invalid data"
               },
               "409" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Conflict; request id mismatch"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "update_contact",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "description" : "Update a contact record.",
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "contact_id",
                  "required" : true,
                  "description" : "Id of a contact",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "in" : "body",
                  "description" : "Contact to update",
                  "required" : true,
                  "schema" : {
                     "$ref" : "#/definitions/ContactUpdate"
                  },
                  "name" : "data"
               }
            ]
         },
         "delete" : {
            "parameters" : [
               {
                  "format" : "uuid",
                  "type" : "string",
                  "in" : "path",
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id"
               }
            ],
            "description" : "Delete a contact.",
            "consumes" : [
               "application/vnd.api+json"
            ],
            "responses" : {
               "204" : {
                  "description" : "No Content; Contact deletion success"
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            },
            "operationId" : "delete_contact"
         },
         "get" : {
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "description" : "Get data for a contact.",
            "parameters" : [
               {
                  "required" : true,
                  "description" : "Id of a contact",
                  "name" : "contact_id",
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "type" : "string",
                  "in" : "query",
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "name" : "fields"
               }
            ],
            "operationId" : "get_contact",
            "responses" : {
               "200" : {
                  "description" : "GET contact response",
                  "schema" : {
                     "$ref" : "#/definitions/data_Contact"
                  }
               },
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               }
            }
         }
      },
      "/media/{medium_id}/alerting_checks" : {
         "get" : {
            "parameters" : [
               {
                  "type" : "string",
                  "in" : "path",
                  "name" : "medium_id",
                  "required" : true,
                  "description" : "Id of a medium"
               }
            ],
            "description" : "Returns all checks that have alerted through a medium (that are still failing.",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "operationId" : "get_medium_alerting_checks",
            "responses" : {
               "200" : {
                  "description" : "GET media response",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/CheckReference"
                     }
                  }
               },
               "403" : {
                  "description" : "Forbidden; invalid request",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               },
               "404" : {
                  "description" : "Not Found",
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  }
               }
            }
         }
      },
      "/statistics/{statistic_id}" : {
         "get" : {
            "responses" : {
               "404" : {
                  "schema" : {
                     "$ref" : "#/definitions/Errors"
                  },
                  "description" : "Not Found"
               },
               "200" : {
                  "description" : "GET statistic response",
                  "schema" : {
                     "$ref" : "#/definitions/data_Statistic"
                  }
               }
            },
            "operationId" : "get_statistic",
            "produces" : [
               "application/vnd.api+json; supported-ext=bulk"
            ],
            "parameters" : [
               {
                  "name" : "statistic_id",
                  "description" : "Id of a statistic",
                  "required" : true,
                  "in" : "path",
                  "format" : "uuid",
                  "type" : "string"
               },
               {
                  "name" : "fields",
                  "required" : false,
                  "description" : "Comma-separated list of fields to return",
                  "in" : "query",
                  "type" : "string"
               }
            ],
            "description" : "Returns a single event statistics data object."
         }
      }
   },
   "host" : "localhost",
   "consumes" : [
      "application/vnd.api+json"
   ],
   "info" : {
      "contact" : {
         "name" : ""
      },
      "version" : "2.0.0",
      "license" : {
         "name" : "MIT"
      },
      "title" : "Flapjack API",
      "description" : ""
   },
   "schemes" : [
      "http"
   ]
}
